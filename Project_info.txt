# Library System Web Application

This project is a basic web application for a Library System, demonstrating secure user registration, login with Multi-Factor Authentication (MFA), password management, and a visually appealing "library vibe" user interface.

## Table of Contents

1.  [Features](#features)
2.  [Technologies Used](#technologies-used)
3.  [Project Structure](#project-structure)
4.  [Setup and Installation](#setup-and-installation)
    * [Database Setup](#database-setup)
    * [Backend Setup](#backend-setup)
    * [Frontend Setup](#frontend-setup)
5.  [How to Run](#how-to-run)
6.  [Screenshots (Optional)](#screenshots-optional)
7.  [Future Enhancements (Optional)](#future-enhancements-optional)

## 1. Features

This system comes equipped with several modern security and usability features:

* **User Registration:**
    * New users can sign up with an email and password.
    * Includes a **Password Policy** with a live strength indicator during registration (checks for length, uppercase, lowercase, numbers, and special characters).
    * Integrated **Cloudflare Turnstile** CAPTCHA for bot protection.
* **User Login with MFA (Multi-Factor Authentication):**
    * Users log in with their email and password.
    * A **One-Time Password (OTP)** is sent to their registered email for secondary authentication.
    * The OTP must be verified to gain access.
    * Integrated **Cloudflare Turnstile** CAPTCHA.
* **Secure Password Storage:**
    * All user passwords are securely stored using **Bcrypt hashing**, ensuring that original passwords are never stored in plain text.
* **Forgot Password Functionality:**
    * Users can request a password reset if they forget their password.
    * A unique, time-limited password reset link is sent to their registered email.
    * Allows users to set a new password securely through the provided link.
* **Consistent User Interface:**
    * The application features a dark, rich "library vibe" aesthetic across all pages (login, registration, dashboard, forgot password, reset password) for a cohesive user experience.
* **Dashboard:**
    * A simple dashboard page that a user reaches after successful login.

## 2. Technologies Used

* **Backend:**
    * **Python 3:** Core programming language.
    * **Flask:** Web framework for building the API.
    * **Flask-CORS:** For handling Cross-Origin Resource Sharing.
    * **Psycopg2:** PostgreSQL adapter for Python.
    * **Bcrypt:** For secure password hashing.
    * **smtplib:** Python's standard library for sending emails (for OTP and password reset links).
    * **Secrets:** For generating cryptographically strong random numbers (for OTP and tokens).
    * **Datetime & pytz:** For handling timestamps and timezone-aware dates for token expiration.
* **Frontend:**
    * **HTML5:** Structure of web pages.
    * **CSS3:** Styling and "library vibe" theme.
    * **JavaScript (ES6+):** Client-side logic for form handling, API calls, and real-time feedback (e.g., password strength).
    * **Cloudflare Turnstile:** CAPTCHA service.
    * **Google Fonts (Poppins):** For modern typography.
* **Database:**
    * **PostgreSQL:** Relational database for storing user and token information.

## 3. Project Structure
├── app.py                  # backend using Python
├── requirements.txt        # Python dependencies
├── index.html              # Login page
├── register.html           # User registration page
├── dashboard.html          # User dashboard after successful login
├── forgot_password.html    # Page to request password reset email
├── reset_password.html     # Page to set a new password using a token
├── css/
│   └── style.css           # All application-wide CSS for the "library vibe"
├── js/
│   ├── auth.js             # JavaScript for user registration (register.html)
│   ├── login.js            # JavaScript for user login and OTP verification (index.html)
│   ├── password.js         # JavaScript for password strength indicator (register.html)
│   ├── forgot_password.js  # JavaScript for forgot password request (forgot_password.html)
│   └── reset_password.js   # JavaScript for password reset functionality (reset_password.html)
└── static/
└── images/
└── background.jpg  # Background image for the library theme

## 7. Future Enhancements (Optional)

* Add user session management (e.g., using Flask-Login).
* Implement a proper user dashboard with library functionalities (e.g., Browse books, borrowing, returning).
* Add admin panel for managing users and books.
* Improve frontend error handling and user feedback.
* Integrate proper logging for backend activities.
* More robust password policy enforcement on the backend.
* Implement a rate-limiting mechanism for login attempts and OTP requests.

To run Html File: python -m http.server 8000
To run Python FIle: python app.py
LocalHost: http://localhost:8000/index.html
---
